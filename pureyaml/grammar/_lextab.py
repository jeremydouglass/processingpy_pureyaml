# _lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('B_SEQUENCE_COMPACT_START', 'F_SEP', 'DOC_END', 'F_MAP_KEY', 'CAST_TYPE', 'B_MAP_KEY', 'F_SEQUENCE_END', 'INDENT', 'B_FOLD_START', 'F_MAP_START', 'B_FOLD_END', 'DOUBLEQUOTE_END', 'DOC_START', 'SINGLEQUOTE_END', 'SCALAR', 'B_LITERAL_START', 'B_MAP_COMPACT_KEY', 'SINGLEQUOTE_START', 'B_MAP_COMPACT_VALUE', 'B_MAP_VALUE', 'F_SEQUENCE_START', 'B_LITERAL_END', 'DOUBLEQUOTE_START', 'F_MAP_END', 'B_SEQUENCE_START', 'DEDENT'))
_lexreflags   = 64
_lexliterals  = '"'
_lexstateinfo = {'INITIAL': 'inclusive', 'literal': 'exclusive', 'fold': 'exclusive', 'singlequote': 'exclusive', 'flowsequence': 'exclusive', 'flowmap': 'exclusive', 'doublequote': 'exclusive', 'comment': 'exclusive', 'tag': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_ignore_INDENT>\\n\\s*)|(?P<t_begin_tag>(?<!\\\\)!)|(?P<t_begin_doublequote>(?<!\\\\)")|(?P<t_INITIAL_flowsequence_flowmap_begin_comment>\\s*[\\#\\%]\\ ?)|(?P<t_begin_singlequote>(?<!\\\\)\')|(?P<t_begin_literal>\\ *(?<!\\\\)\\|\\ ?\\n)|(?P<t_begin_fold>\\ *(?<!\\\\)\\>\\ ?\\n)|(?P<t_begin_flowsequence>\\[)|(?P<t_begin_flowmap>\\{)|(?P<t_DOC_START>\\-\\-\\-)|(?P<t_DOC_END>\\.\\.\\.)|(?P<t_B_SEQUENCE_COMPACT_START>\n          \\-\\ + (?=  -\\   )\n          #          ^ ^ sequence indicator\n        | \\-\\ + (?=  [\\{\\[]\\   |  [^:\\n]*:\\s   )\n          #            ^ ^          ^^^ map indicator\n          #            ^ ^ flow indicator\n        )|(?P<t_B_SEQUENCE_START>-\\ +|-(?=\\n))|(?P<t_B_MAP_COMPACT_KEY>\n          \\?\\ + (?=  -\\   )\n          #          ^ ^ sequence indicator\n        | \\?\\ + (?=  [\\{\\[]\\   |  [^:\\n]*:\\s   )\n          #            ^ ^          ^^^ map indicator\n          #            ^ ^ flow indicator\n        )|(?P<t_B_MAP_COMPACT_VALUE>\n          \\:\\ + (?=  -\\   )\n          #          ^ ^ sequence indicator\n        | \\:\\ + (?=  [\\{\\[]\\   |  [^:\\n]*:\\s   )\n          #            ^ ^          ^^^ map indicator\n          #            ^ ^ flow indicator\n        )|(?P<t_B_MAP_KEY>\\?\\ +|\\?(?=\\n))|(?P<t_B_MAP_VALUE>:\\ +|:(?=\\n))|(?P<t_ignore_unused_indicators>\\ *[\\@\\`].*(?=\\n))|(?P<t_SCALAR>(?:\\\\.|[^\\n\\#\\:\\-\\|\\>]|[\\:\\-\\|\\>]\\S)+)|(?P<t_ignore_EOL>\\s*\\n)', [None, ('t_ignore_INDENT', 'ignore_INDENT'), ('t_begin_tag', 'begin_tag'), ('t_begin_doublequote', 'begin_doublequote'), ('t_INITIAL_flowsequence_flowmap_begin_comment', 'begin_comment'), ('t_begin_singlequote', 'begin_singlequote'), ('t_begin_literal', 'begin_literal'), ('t_begin_fold', 'begin_fold'), ('t_begin_flowsequence', 'begin_flowsequence'), ('t_begin_flowmap', 'begin_flowmap'), ('t_DOC_START', 'DOC_START'), ('t_DOC_END', 'DOC_END'), ('t_B_SEQUENCE_COMPACT_START', 'B_SEQUENCE_COMPACT_START'), ('t_B_SEQUENCE_START', 'B_SEQUENCE_START'), ('t_B_MAP_COMPACT_KEY', 'B_MAP_COMPACT_KEY'), ('t_B_MAP_COMPACT_VALUE', 'B_MAP_COMPACT_VALUE'), ('t_B_MAP_KEY', 'B_MAP_KEY'), ('t_B_MAP_VALUE', 'B_MAP_VALUE'), ('t_ignore_unused_indicators', 'ignore_unused_indicators'), ('t_SCALAR', 'SCALAR'), (None, None)])], 'literal': [('(?P<t_literal_end>\\n+\\ *)|(?P<t_literal_SCALAR>.+)', [None, ('t_literal_end', 'end'), (None, 'SCALAR')])], 'fold': [('(?P<t_fold_end>\\n+\\ *)|(?P<t_fold_SCALAR>.+)', [None, ('t_fold_end', 'end'), (None, 'SCALAR')])], 'singlequote': [("(?P<t_singlequote_end>(?<!\\\\)')|(?P<t_singlequote_SCALAR>(?:\\\\'|[^']|'')+)", [None, ('t_singlequote_end', 'end'), (None, 'SCALAR')])], 'flowsequence': [('(?P<t_INITIAL_flowsequence_flowmap_begin_comment>\\s*[\\#\\%]\\ ?)|(?P<t_flowsequence_flowmap_F_SEP>,)|(?P<t_flowsequence_flowmap_ignore_space>\\s+)|(?P<t_flowsequence_end>\\])|(?P<t_flowsequence_SCALAR>[^\\[\\],\\#]+)', [None, ('t_INITIAL_flowsequence_flowmap_begin_comment', 'begin_comment'), ('t_flowsequence_flowmap_F_SEP', 'F_SEP'), ('t_flowsequence_flowmap_ignore_space', 'ignore_space'), ('t_flowsequence_end', 'end'), (None, 'SCALAR')])], 'flowmap': [('(?P<t_INITIAL_flowsequence_flowmap_begin_comment>\\s*[\\#\\%]\\ ?)|(?P<t_flowsequence_flowmap_F_SEP>,)|(?P<t_flowsequence_flowmap_ignore_space>\\s+)|(?P<t_flowmap_F_MAP_KEY>\\:\\ ?)|(?P<t_flowmap_end>\\})|(?P<t_flowmap_SCALAR>[^\\{\\}\\:,\\#]+)', [None, ('t_INITIAL_flowsequence_flowmap_begin_comment', 'begin_comment'), ('t_flowsequence_flowmap_F_SEP', 'F_SEP'), ('t_flowsequence_flowmap_ignore_space', 'ignore_space'), ('t_flowmap_F_MAP_KEY', 'F_MAP_KEY'), ('t_flowmap_end', 'end'), (None, 'SCALAR')])], 'doublequote': [('(?P<t_doublequote_end>(?<!\\\\)")|(?P<t_doublequote_SCALAR>(?:\\\\"|[^"])+)', [None, ('t_doublequote_end', 'end'), (None, 'SCALAR')])], 'comment': [('(?P<t_comment_end>(?=\\n))|(?P<t_comment_ignore_COMMENT>[^\\n]+)', [None, ('t_comment_end', 'end'), (None, None)])], 'tag': [('(?P<t_tag_end>\\ )|(?P<t_tag_CAST_TYPE>(?<=\\!)[a-z]+)', [None, ('t_tag_end', 'end'), ('t_tag_CAST_TYPE', 'CAST_TYPE')]), ('(?P<t_ignore_INDENT>\\n\\s*)|(?P<t_begin_tag>(?<!\\\\)!)|(?P<t_begin_doublequote>(?<!\\\\)")|(?P<t_INITIAL_flowsequence_flowmap_begin_comment>\\s*[\\#\\%]\\ ?)|(?P<t_begin_singlequote>(?<!\\\\)\')|(?P<t_begin_literal>\\ *(?<!\\\\)\\|\\ ?\\n)|(?P<t_begin_fold>\\ *(?<!\\\\)\\>\\ ?\\n)|(?P<t_begin_flowsequence>\\[)|(?P<t_begin_flowmap>\\{)|(?P<t_DOC_START>\\-\\-\\-)|(?P<t_DOC_END>\\.\\.\\.)|(?P<t_B_SEQUENCE_COMPACT_START>\n          \\-\\ + (?=  -\\   )\n          #          ^ ^ sequence indicator\n        | \\-\\ + (?=  [\\{\\[]\\   |  [^:\\n]*:\\s   )\n          #            ^ ^          ^^^ map indicator\n          #            ^ ^ flow indicator\n        )|(?P<t_B_SEQUENCE_START>-\\ +|-(?=\\n))|(?P<t_B_MAP_COMPACT_KEY>\n          \\?\\ + (?=  -\\   )\n          #          ^ ^ sequence indicator\n        | \\?\\ + (?=  [\\{\\[]\\   |  [^:\\n]*:\\s   )\n          #            ^ ^          ^^^ map indicator\n          #            ^ ^ flow indicator\n        )|(?P<t_B_MAP_COMPACT_VALUE>\n          \\:\\ + (?=  -\\   )\n          #          ^ ^ sequence indicator\n        | \\:\\ + (?=  [\\{\\[]\\   |  [^:\\n]*:\\s   )\n          #            ^ ^          ^^^ map indicator\n          #            ^ ^ flow indicator\n        )|(?P<t_B_MAP_KEY>\\?\\ +|\\?(?=\\n))|(?P<t_B_MAP_VALUE>:\\ +|:(?=\\n))|(?P<t_ignore_unused_indicators>\\ *[\\@\\`].*(?=\\n))|(?P<t_SCALAR>(?:\\\\.|[^\\n\\#\\:\\-\\|\\>]|[\\:\\-\\|\\>]\\S)+)|(?P<t_ignore_EOL>\\s*\\n)', [None, ('t_ignore_INDENT', 'ignore_INDENT'), ('t_begin_tag', 'begin_tag'), ('t_begin_doublequote', 'begin_doublequote'), ('t_INITIAL_flowsequence_flowmap_begin_comment', 'begin_comment'), ('t_begin_singlequote', 'begin_singlequote'), ('t_begin_literal', 'begin_literal'), ('t_begin_fold', 'begin_fold'), ('t_begin_flowsequence', 'begin_flowsequence'), ('t_begin_flowmap', 'begin_flowmap'), ('t_DOC_START', 'DOC_START'), ('t_DOC_END', 'DOC_END'), ('t_B_SEQUENCE_COMPACT_START', 'B_SEQUENCE_COMPACT_START'), ('t_B_SEQUENCE_START', 'B_SEQUENCE_START'), ('t_B_MAP_COMPACT_KEY', 'B_MAP_COMPACT_KEY'), ('t_B_MAP_COMPACT_VALUE', 'B_MAP_COMPACT_VALUE'), ('t_B_MAP_KEY', 'B_MAP_KEY'), ('t_B_MAP_VALUE', 'B_MAP_VALUE'), ('t_ignore_unused_indicators', 'ignore_unused_indicators'), ('t_SCALAR', 'SCALAR'), (None, None)])]}
_lexstateignore = {'INITIAL': '', 'tag': ''}
_lexstateerrorf = {'INITIAL': 't_ANY_error', 'literal': 't_ANY_error', 'fold': 't_ANY_error', 'singlequote': 't_ANY_error', 'flowsequence': 't_ANY_error', 'flowmap': 't_ANY_error', 'doublequote': 't_ANY_error', 'comment': 't_ANY_error', 'tag': 't_ANY_error'}
_lexstateeoff = {}
